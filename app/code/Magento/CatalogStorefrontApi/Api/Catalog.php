<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

use \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResultInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponseInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductVariantsGetRequestInterface;
use \Magento\CatalogStorefrontApi\Api\Data\ProductVariantsGetResponseInterface;
use \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest;
use \Magento\CatalogStorefrontApi\Proto\ProductsGetResult;
use \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteProductsRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteProductsResponse;
use \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesRequest;
use \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesResponse;
use \Magento\CatalogStorefrontApi\Proto\ImportCategoriesRequest;
use \Magento\CatalogStorefrontApi\Proto\ImportCategoriesResponse;
use \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest;
use \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse;
use \Magento\CatalogStorefrontApi\Proto\ProductVariantsGetRequest;
use \Magento\CatalogStorefrontApi\Proto\ProductVariantsGetResponse;
use \Magento\CatalogStorefrontApi\Proto\CatalogClient;

/**
 * Autogenerated description for Catalog class
 *
 * @SuppressWarnings(PHPMD)
 */
class Catalog implements CatalogInterface
{
    /**
     * @var CatalogClient
     */
    private $protoClient;

    /**
     * @param string $hostname
     * @param array $options
     * @param string|null $channel
     */
    public function __construct(
        string $hostname,
        array $options,
        ?string $channel = null
    ) {
        $this->protoClient = new CatalogClient($hostname, $options, $channel);
    }

    /**
     * @inheritdoc
     *
     * @param ProductsGetRequestInterface $request
     * @return ProductsGetResultInterface
     * @throws \Throwable
     */
    public function getProducts(ProductsGetRequestInterface $request): ProductsGetResultInterface
    {
        $protoRequest = $this->getProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->getProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getProductsFromProto($protoResult);
    }

    /**
     * Autogenerated description for getProducts method
     *
     * @param ProductsGetRequestInterface $value
     * @return ProductsGetRequest
     */
    private function getProductsToProto(ProductsGetRequestInterface $value): ProductsGetRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest
        // to \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setStore($value->getStore());
            $values = [];
            foreach ($value->getAttributeCodes() as $newValue) {
                $values[] = $newValue;
            }
            $r->setAttributeCodes($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getProducts method
     *
     * @param ProductsGetResult $value
     * @return ProductsGetResultInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getProductsFromProto(ProductsGetResult $value): ProductsGetResultInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductsGetResult
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductsGetResult $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Product
                // to \Magento\CatalogStorefrontApi\Api\Data\Product
                /** @var \Magento\CatalogStorefrontApi\Proto\Product $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Product();
                    $r->setId($item1->getId());
                    $r->setAttributeSetId($item1->getAttributeSetId());
                    $r->setHasOptions($item1->getHasOptions());
                    $r->setCreatedAt($item1->getCreatedAt());
                    $r->setUpdatedAt($item1->getUpdatedAt());
                    $r->setSku($item1->getSku());
                    $r->setTypeId($item1->getTypeId());
                    $r->setStatus($item1->getStatus());
                    $r->setStockStatus($item1->getStockStatus());
                    $r->setName($item1->getName());
                    $r->setDescription($item1->getDescription());
                    $r->setShortDescription($item1->getShortDescription());
                    $r->setUrlKey($item1->getUrlKey());
                    $r->setQty($item1->getQty());
                    $r->setTaxClassId($item1->getTaxClassId());
                    $r->setWeight($item1->getWeight());
                    $res = [];
                    foreach ($item1->getImages() as $item18) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $item18 **/
                        $p = function () use ($item18) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $prop19 = $item18->getResource();
                            if ($prop19 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\MediaResource
                                // to \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Proto\MediaResource $prop19 **/
                                $p = function () use ($prop19) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\MediaResource();
                                    $r->setUrl($prop19->getUrl());
                                    $r->setLabel($prop19->getLabel());
                                    $values = [];
                                    foreach ($prop19->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $out = $p();
                                $r->setResource($out);
                            }
                            $r->setSortOrder($item18->getSortOrder());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setImages($res);
                    $res = [];
                    foreach ($item1->getVideos() as $item19) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Video
                        // to \Magento\CatalogStorefrontApi\Api\Data\Video
                        /** @var \Magento\CatalogStorefrontApi\Proto\Video $item19 **/
                        $p = function () use ($item19) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Video();
                            $prop20 = $item19->getPreview();
                            if ($prop20 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\MediaResource
                                // to \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Proto\MediaResource $prop20 **/
                                $p = function () use ($prop20) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\MediaResource();
                                    $r->setUrl($prop20->getUrl());
                                    $r->setLabel($prop20->getLabel());
                                    $values = [];
                                    foreach ($prop20->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $out = $p();
                                $r->setPreview($out);
                            }
                            $prop21 = $item19->getVideo();
                            if ($prop21 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\VideoItem
                                // to \Magento\CatalogStorefrontApi\Api\Data\VideoItem
                                /** @var \Magento\CatalogStorefrontApi\Proto\VideoItem $prop21 **/
                                $p = function () use ($prop21) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\VideoItem();
                                    $r->setVideoProvider($prop21->getVideoProvider());
                                    $r->setVideoUrl($prop21->getVideoUrl());
                                    $r->setVideoTitle($prop21->getVideoTitle());
                                    $r->setVideoDescription($prop21->getVideoDescription());
                                    $r->setVideoMetadata($prop21->getVideoMetadata());
                                    $r->setMediaType($prop21->getMediaType());
                                    return $r;
                                };
                                $out = $p();
                                $r->setVideo($out);
                            }
                            $r->setSortOrder($item19->getSortOrder());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setVideos($res);
                    $res = [];
                    foreach ($item1->getSamples() as $item20) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Sample
                        // to \Magento\CatalogStorefrontApi\Api\Data\Sample
                        /** @var \Magento\CatalogStorefrontApi\Proto\Sample $item20 **/
                        $p = function () use ($item20) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Sample();
                            $prop21 = $item20->getResource();
                            if ($prop21 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\MediaResource
                                // to \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Proto\MediaResource $prop21 **/
                                $p = function () use ($prop21) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\MediaResource();
                                    $r->setUrl($prop21->getUrl());
                                    $r->setLabel($prop21->getLabel());
                                    $values = [];
                                    foreach ($prop21->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $out = $p();
                                $r->setResource($out);
                            }
                            $r->setSortOrder($item20->getSortOrder());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setSamples($res);
                    $r->setVisibility($item1->getVisibility());
                    $res = [];
                    foreach ($item1->getDynamicAttributes() as $item22) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue
                        // to \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue
                        /** @var \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue $item22 **/
                        $p = function () use ($item22) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue();
                            $r->setCode($item22->getCode());
                            $r->setValue($item22->getValue());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setDynamicAttributes($res);
                    $r->setMetaDescription($item1->getMetaDescription());
                    $r->setMetaKeyword($item1->getMetaKeyword());
                    $r->setMetaTitle($item1->getMetaTitle());
                    $values = [];
                    foreach ($item1->getCategories() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCategories($values);
                    $r->setRequiredOptions($item1->getRequiredOptions());
                    $r->setCreatedIn($item1->getCreatedIn());
                    $r->setUpdatedIn($item1->getUpdatedIn());
                    $r->setQuantityAndStockStatus($item1->getQuantityAndStockStatus());
                    $r->setOptionsContainer($item1->getOptionsContainer());
                    $r->setMsrpDisplayActualPriceType($item1->getMsrpDisplayActualPriceType());
                    $r->setIsReturnable($item1->getIsReturnable());
                    $r->setUrlSuffix($item1->getUrlSuffix());
                    $res = [];
                    foreach ($item1->getOptions() as $item35) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Option
                        // to \Magento\CatalogStorefrontApi\Api\Data\Option
                        /** @var \Magento\CatalogStorefrontApi\Proto\Option $item35 **/
                        $p = function () use ($item35) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Option();
                            $r->setOptionId($item35->getOptionId());
                            $r->setProductId($item35->getProductId());
                            $r->setType($item35->getType());
                            $r->setIsRequire($item35->getIsRequire());
                            $r->setSku($item35->getSku());
                            $r->setMaxCharacters($item35->getMaxCharacters());
                            $r->setFileExtension($item35->getFileExtension());
                            $r->setImageSizeX($item35->getImageSizeX());
                            $r->setImageSizeY($item35->getImageSizeY());
                            $r->setSortOrder($item35->getSortOrder());
                            $r->setDefaultTitle($item35->getDefaultTitle());
                            $r->setStoreTitle($item35->getStoreTitle());
                            $r->setTitle($item35->getTitle());
                            $r->setDefaultPrice($item35->getDefaultPrice());
                            $r->setDefaultPriceType($item35->getDefaultPriceType());
                            $r->setStorePrice($item35->getStorePrice());
                            $r->setStorePriceType($item35->getStorePriceType());
                            $r->setPrice($item35->getPrice());
                            $r->setPriceType($item35->getPriceType());
                            $r->setRequired($item35->getRequired());
                            $r->setProductSku($item35->getProductSku());
                            $res = [];
                            foreach ($item35->getValue() as $item57) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\OptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\OptionValue $item57 **/
                                $p = function () use ($item57) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\OptionValue();
                                    $r->setOptionId($item57->getOptionId());
                                    $r->setProductId($item57->getProductId());
                                    $r->setType($item57->getType());
                                    $r->setIsRequire($item57->getIsRequire());
                                    $r->setSku($item57->getSku());
                                    $r->setMaxCharacters($item57->getMaxCharacters());
                                    $r->setFileExtension($item57->getFileExtension());
                                    $r->setImageSizeX($item57->getImageSizeX());
                                    $r->setImageSizeY($item57->getImageSizeY());
                                    $r->setSortOrder($item57->getSortOrder());
                                    $r->setDefaultTitle($item57->getDefaultTitle());
                                    $r->setStoreTitle($item57->getStoreTitle());
                                    $r->setTitle($item57->getTitle());
                                    $r->setDefaultPrice($item57->getDefaultPrice());
                                    $r->setDefaultPriceType($item57->getDefaultPriceType());
                                    $r->setStorePrice($item57->getStorePrice());
                                    $r->setStorePriceType($item57->getStorePriceType());
                                    $r->setPrice($item57->getPrice());
                                    $r->setPriceType($item57->getPriceType());
                                    $r->setOptionTypeId($item57->getOptionTypeId());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValue($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setOptions($res);
                    $res = [];
                    foreach ($item1->getUrlRewrites() as $item36) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\UrlRewrite
                        // to \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite
                        /** @var \Magento\CatalogStorefrontApi\Proto\UrlRewrite $item36 **/
                        $p = function () use ($item36) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite();
                            $r->setUrl($item36->getUrl());
                            $res = [];
                            foreach ($item36->getParameters() as $item38) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter
                                // to \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter
                                /** @var \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter $item38 **/
                                $p = function () use ($item38) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter();
                                    $r->setName($item38->getName());
                                    $r->setValue($item38->getValue());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setParameters($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setUrlRewrites($res);
                    $res = [];
                    foreach ($item1->getVariants() as $item37) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Variant
                        // to \Magento\CatalogStorefrontApi\Api\Data\Variant
                        /** @var \Magento\CatalogStorefrontApi\Proto\Variant $item37 **/
                        $p = function () use ($item37) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Variant();
                            $r->setProduct($item37->getProduct());
                            $res = [];
                            foreach ($item37->getAttributes() as $item39) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\VariantAttribute
                                // to \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute
                                /** @var \Magento\CatalogStorefrontApi\Proto\VariantAttribute $item39 **/
                                $p = function () use ($item39) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute();
                                    $r->setLabel($item39->getLabel());
                                    $r->setCode($item39->getCode());
                                    $r->setValueIndex($item39->getValueIndex());
                                    $r->setAttributeId($item39->getAttributeId());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setAttributes($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setVariants($res);
                    $res = [];
                    foreach ($item1->getConfigurableOptions() as $item38) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ConfigurableOption
                        // to \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption
                        /** @var \Magento\CatalogStorefrontApi\Proto\ConfigurableOption $item38 **/
                        $p = function () use ($item38) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption();
                            $r->setId($item38->getId());
                            $r->setLabel($item38->getLabel());
                            $r->setPosition($item38->getPosition());
                            $r->setUseDefault($item38->getUseDefault());
                            $r->setProductId($item38->getProductId());
                            $r->setAttributeCode($item38->getAttributeCode());
                            $r->setAttributeId($item38->getAttributeId());
                            $res = [];
                            foreach ($item38->getValues() as $item46) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue $item46 **/
                                $p = function () use ($item46) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue();
                                    $r->setValueIndex($item46->getValueIndex());
                                    $r->setLabel($item46->getLabel());
                                    $r->setDefaultLabel($item46->getDefaultLabel());
                                    $r->setStoreLabel($item46->getStoreLabel());
                                    $r->setUseDefaultValue($item46->getUseDefaultValue());
                                    $r->setAttributeId($item46->getAttributeId());
                                    $r->setProductId($item46->getProductId());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValues($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setConfigurableOptions($res);
                    $r->setCountryOfManufacture($item1->getCountryOfManufacture());
                    $r->setGiftMessageAvailable($item1->getGiftMessageAvailable());
                    $r->setSpecialPrice($item1->getSpecialPrice());
                    $r->setSpecialFromDate($item1->getSpecialFromDate());
                    $r->setSpecialToDate($item1->getSpecialToDate());
                    $res = [];
                    foreach ($item1->getProductLinks() as $item44) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductLink
                        // to \Magento\CatalogStorefrontApi\Api\Data\ProductLink
                        /** @var \Magento\CatalogStorefrontApi\Proto\ProductLink $item44 **/
                        $p = function () use ($item44) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductLink();
                            $r->setLinkedProductSku($item44->getLinkedProductSku());
                            $r->setTypeId($item44->getTypeId());
                            $r->setLinkedProductType($item44->getLinkedProductType());
                            $r->setLinkTypeId($item44->getLinkTypeId());
                            $r->setPosition($item44->getPosition());
                            $r->setSku($item44->getSku());
                            $r->setProductId($item44->getProductId());
                            $r->setLinkType($item44->getLinkType());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setProductLinks($res);
                    $r->setCanonicalUrl($item1->getCanonicalUrl());
                    $r->setPriceView($item1->getPriceView());
                    $r->setLinksPurchasedSeparately($item1->getLinksPurchasedSeparately());
                    $r->setOnlyXLeftInStock($item1->getOnlyXLeftInStock());
                    $res = [];
                    foreach ($item1->getGroupedItems() as $item49) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\GroupedItem
                        // to \Magento\CatalogStorefrontApi\Api\Data\GroupedItem
                        /** @var \Magento\CatalogStorefrontApi\Proto\GroupedItem $item49 **/
                        $p = function () use ($item49) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\GroupedItem();
                            $r->setQty($item49->getQty());
                            $r->setPosition($item49->getPosition());
                            $r->setProduct($item49->getProduct());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setGroupedItems($res);
                    $res = [];
                    foreach ($item1->getProductOptions() as $item50) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductOption
                        // to \Magento\CatalogStorefrontApi\Api\Data\ProductOption
                        /** @var \Magento\CatalogStorefrontApi\Proto\ProductOption $item50 **/
                        $p = function () use ($item50) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductOption();
                            $r->setId($item50->getId());
                            $r->setLabel($item50->getLabel());
                            $r->setSortOrder($item50->getSortOrder());
                            $r->setRequired($item50->getRequired());
                            $r->setRenderType($item50->getRenderType());
                            $r->setType($item50->getType());
                            $res = [];
                            foreach ($item50->getValues() as $item57) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\ProductOptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\ProductOptionValue $item57 **/
                                $p = function () use ($item57) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue();
                                    $r->setId($item57->getId());
                                    $r->setLabel($item57->getLabel());
                                    $r->setSortOrder($item57->getSortOrder());
                                    $r->setDefault($item57->getDefault());
                                    $r->setImageUrl($item57->getImageUrl());
                                    $r->setQtyMutability($item57->getQtyMutability());
                                    $r->setQty($item57->getQty());
                                    $r->setInfoUrl($item57->getInfoUrl());
                                    $r->setPrice($item57->getPrice());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValues($res);
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setProductOptions($res);
                    $res = [];
                    foreach ($item1->getShopperInputOptions() as $item51) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption
                        // to \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption
                        /** @var \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption $item51 **/
                        $p = function () use ($item51) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption();
                            $r->setId($item51->getId());
                            $r->setLabel($item51->getLabel());
                            $r->setSortOrder($item51->getSortOrder());
                            $r->setRequired($item51->getRequired());
                            $r->setRenderType($item51->getRenderType());
                            $res = [];
                            foreach ($item51->getPrice() as $item57) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\Price
                                // to \Magento\CatalogStorefrontApi\Api\Data\Price
                                /** @var \Magento\CatalogStorefrontApi\Proto\Price $item57 **/
                                $p = function () use ($item57) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Price();
                                    $r->setRegularPrice($item57->getRegularPrice());
                                    $r->setFinalPrice($item57->getFinalPrice());
                                    $r->setScope($item57->getScope());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setPrice($res);
                            $r->setValue($item51->getValue());
                            $r->setMaxCharacters($item51->getMaxCharacters());
                            $values = [];
                            foreach ($item51->getFileExtension() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setFileExtension($values);
                            $r->setImageSizeX($item51->getImageSizeX());
                            $r->setImageSizeY($item51->getImageSizeY());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setShopperInputOptions($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ImportProductsRequestInterface $request
     * @return ImportProductsResponseInterface
     * @throws \Throwable
     */
    public function importProducts(ImportProductsRequestInterface $request): ImportProductsResponseInterface
    {
        $protoRequest = $this->importProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->importProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->importProductsFromProto($protoResult);
    }

    /**
     * Autogenerated description for importProducts method
     *
     * @param ImportProductsRequestInterface $value
     * @return ImportProductsRequest
     */
    private function importProductsToProto(ImportProductsRequestInterface $value): ImportProductsRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest
        // to \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest();
            $res = [];
            foreach ($value->getProducts() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Product
                // to \Magento\CatalogStorefrontApi\Proto\Product
                /** @var \Magento\CatalogStorefrontApi\Api\Data\Product $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\Product();
                    $r->setId($item1->getId());
                    $r->setAttributeSetId($item1->getAttributeSetId());
                    $r->setHasOptions($item1->getHasOptions());
                    $r->setCreatedAt($item1->getCreatedAt());
                    $r->setUpdatedAt($item1->getUpdatedAt());
                    $r->setSku($item1->getSku());
                    $r->setTypeId($item1->getTypeId());
                    $r->setStatus($item1->getStatus());
                    $r->setStockStatus($item1->getStockStatus());
                    $r->setName($item1->getName());
                    $r->setDescription($item1->getDescription());
                    $r->setShortDescription($item1->getShortDescription());
                    $r->setUrlKey($item1->getUrlKey());
                    $r->setQty($item1->getQty());
                    $r->setTaxClassId($item1->getTaxClassId());
                    $r->setWeight($item1->getWeight());
                    $res = [];
                    foreach ($item1->getImages() as $item18) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $item18 **/
                        $p = function () use ($item18) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $prop19 = $item18->getResource();
                            if ($prop19 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                // to \Magento\CatalogStorefrontApi\Proto\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\MediaResource $prop19 **/
                                $p = function () use ($prop19) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\MediaResource();
                                    $r->setUrl($prop19->getUrl());
                                    $r->setLabel($prop19->getLabel());
                                    $values = [];
                                    foreach ($prop19->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $proto = $p();
                                $r->setResource($proto);
                            }
                            $r->setSortOrder($item18->getSortOrder());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setImages($res);
                    $res = [];
                    foreach ($item1->getVideos() as $item19) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Video
                        // to \Magento\CatalogStorefrontApi\Proto\Video
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Video $item19 **/
                        $p = function () use ($item19) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Video();
                            $prop20 = $item19->getPreview();
                            if ($prop20 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                // to \Magento\CatalogStorefrontApi\Proto\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\MediaResource $prop20 **/
                                $p = function () use ($prop20) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\MediaResource();
                                    $r->setUrl($prop20->getUrl());
                                    $r->setLabel($prop20->getLabel());
                                    $values = [];
                                    foreach ($prop20->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $proto = $p();
                                $r->setPreview($proto);
                            }
                            $prop21 = $item19->getVideo();
                            if ($prop21 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\VideoItem
                                // to \Magento\CatalogStorefrontApi\Proto\VideoItem
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\VideoItem $prop21 **/
                                $p = function () use ($prop21) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\VideoItem();
                                    $r->setVideoProvider($prop21->getVideoProvider());
                                    $r->setVideoUrl($prop21->getVideoUrl());
                                    $r->setVideoTitle($prop21->getVideoTitle());
                                    $r->setVideoDescription($prop21->getVideoDescription());
                                    $r->setVideoMetadata($prop21->getVideoMetadata());
                                    $r->setMediaType($prop21->getMediaType());
                                    return $r;
                                };
                                $proto = $p();
                                $r->setVideo($proto);
                            }
                            $r->setSortOrder($item19->getSortOrder());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setVideos($res);
                    $res = [];
                    foreach ($item1->getSamples() as $item20) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Sample
                        // to \Magento\CatalogStorefrontApi\Proto\Sample
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Sample $item20 **/
                        $p = function () use ($item20) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Sample();
                            $prop21 = $item20->getResource();
                            if ($prop21 !== null) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\MediaResource
                                // to \Magento\CatalogStorefrontApi\Proto\MediaResource
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\MediaResource $prop21 **/
                                $p = function () use ($prop21) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\MediaResource();
                                    $r->setUrl($prop21->getUrl());
                                    $r->setLabel($prop21->getLabel());
                                    $values = [];
                                    foreach ($prop21->getRoles() as $newValue) {
                                        $values[] = $newValue;
                                    }
                                    $r->setRoles($values);
                                    return $r;
                                };
                                $proto = $p();
                                $r->setResource($proto);
                            }
                            $r->setSortOrder($item20->getSortOrder());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setSamples($res);
                    $r->setVisibility($item1->getVisibility());
                    $res = [];
                    foreach ($item1->getDynamicAttributes() as $item22) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue
                        // to \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue $item22 **/
                        $p = function () use ($item22) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue();
                            $r->setCode($item22->getCode());
                            $r->setValue($item22->getValue());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setDynamicAttributes($res);
                    $r->setMetaDescription($item1->getMetaDescription());
                    $r->setMetaKeyword($item1->getMetaKeyword());
                    $r->setMetaTitle($item1->getMetaTitle());
                    $values = [];
                    foreach ($item1->getCategories() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCategories($values);
                    $r->setRequiredOptions($item1->getRequiredOptions());
                    $r->setCreatedIn($item1->getCreatedIn());
                    $r->setUpdatedIn($item1->getUpdatedIn());
                    $r->setQuantityAndStockStatus($item1->getQuantityAndStockStatus());
                    $r->setOptionsContainer($item1->getOptionsContainer());
                    $r->setMsrpDisplayActualPriceType($item1->getMsrpDisplayActualPriceType());
                    $r->setIsReturnable($item1->getIsReturnable());
                    $r->setUrlSuffix($item1->getUrlSuffix());
                    $res = [];
                    foreach ($item1->getOptions() as $item35) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Option
                        // to \Magento\CatalogStorefrontApi\Proto\Option
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Option $item35 **/
                        $p = function () use ($item35) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Option();
                            $r->setOptionId($item35->getOptionId());
                            $r->setProductId($item35->getProductId());
                            $r->setType($item35->getType());
                            $r->setIsRequire($item35->getIsRequire());
                            $r->setSku($item35->getSku());
                            $r->setMaxCharacters($item35->getMaxCharacters());
                            $r->setFileExtension($item35->getFileExtension());
                            $r->setImageSizeX($item35->getImageSizeX());
                            $r->setImageSizeY($item35->getImageSizeY());
                            $r->setSortOrder($item35->getSortOrder());
                            $r->setDefaultTitle($item35->getDefaultTitle());
                            $r->setStoreTitle($item35->getStoreTitle());
                            $r->setTitle($item35->getTitle());
                            $r->setDefaultPrice($item35->getDefaultPrice());
                            $r->setDefaultPriceType($item35->getDefaultPriceType());
                            $r->setStorePrice($item35->getStorePrice());
                            $r->setStorePriceType($item35->getStorePriceType());
                            $r->setPrice($item35->getPrice());
                            $r->setPriceType($item35->getPriceType());
                            $r->setRequired($item35->getRequired());
                            $r->setProductSku($item35->getProductSku());
                            $res = [];
                            foreach ($item35->getValue() as $item57) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                // to \Magento\CatalogStorefrontApi\Proto\OptionValue
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\OptionValue $item57 **/
                                $p = function () use ($item57) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\OptionValue();
                                    $r->setOptionId($item57->getOptionId());
                                    $r->setProductId($item57->getProductId());
                                    $r->setType($item57->getType());
                                    $r->setIsRequire($item57->getIsRequire());
                                    $r->setSku($item57->getSku());
                                    $r->setMaxCharacters($item57->getMaxCharacters());
                                    $r->setFileExtension($item57->getFileExtension());
                                    $r->setImageSizeX($item57->getImageSizeX());
                                    $r->setImageSizeY($item57->getImageSizeY());
                                    $r->setSortOrder($item57->getSortOrder());
                                    $r->setDefaultTitle($item57->getDefaultTitle());
                                    $r->setStoreTitle($item57->getStoreTitle());
                                    $r->setTitle($item57->getTitle());
                                    $r->setDefaultPrice($item57->getDefaultPrice());
                                    $r->setDefaultPriceType($item57->getDefaultPriceType());
                                    $r->setStorePrice($item57->getStorePrice());
                                    $r->setStorePriceType($item57->getStorePriceType());
                                    $r->setPrice($item57->getPrice());
                                    $r->setPriceType($item57->getPriceType());
                                    $r->setOptionTypeId($item57->getOptionTypeId());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setValue($res);
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setOptions($res);
                    $res = [];
                    foreach ($item1->getUrlRewrites() as $item36) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite
                        // to \Magento\CatalogStorefrontApi\Proto\UrlRewrite
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite $item36 **/
                        $p = function () use ($item36) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\UrlRewrite();
                            $r->setUrl($item36->getUrl());
                            $res = [];
                            foreach ($item36->getParameters() as $item38) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter
                                // to \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter $item38 **/
                                $p = function () use ($item38) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter();
                                    $r->setName($item38->getName());
                                    $r->setValue($item38->getValue());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setParameters($res);
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setUrlRewrites($res);
                    $res = [];
                    foreach ($item1->getVariants() as $item37) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Variant
                        // to \Magento\CatalogStorefrontApi\Proto\Variant
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Variant $item37 **/
                        $p = function () use ($item37) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Variant();
                            $r->setProduct($item37->getProduct());
                            $res = [];
                            foreach ($item37->getAttributes() as $item39) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute
                                // to \Magento\CatalogStorefrontApi\Proto\VariantAttribute
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute $item39 **/
                                $p = function () use ($item39) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\VariantAttribute();
                                    $r->setLabel($item39->getLabel());
                                    $r->setCode($item39->getCode());
                                    $r->setValueIndex($item39->getValueIndex());
                                    $r->setAttributeId($item39->getAttributeId());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setAttributes($res);
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setVariants($res);
                    $res = [];
                    foreach ($item1->getConfigurableOptions() as $item38) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption
                        // to \Magento\CatalogStorefrontApi\Proto\ConfigurableOption
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption $item38 **/
                        $p = function () use ($item38) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\ConfigurableOption();
                            $r->setId($item38->getId());
                            $r->setLabel($item38->getLabel());
                            $r->setPosition($item38->getPosition());
                            $r->setUseDefault($item38->getUseDefault());
                            $r->setProductId($item38->getProductId());
                            $r->setAttributeCode($item38->getAttributeCode());
                            $r->setAttributeId($item38->getAttributeId());
                            $res = [];
                            foreach ($item38->getValues() as $item46) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue
                                // to \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue $item46 **/
                                $p = function () use ($item46) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue();
                                    $r->setValueIndex($item46->getValueIndex());
                                    $r->setLabel($item46->getLabel());
                                    $r->setDefaultLabel($item46->getDefaultLabel());
                                    $r->setStoreLabel($item46->getStoreLabel());
                                    $r->setUseDefaultValue($item46->getUseDefaultValue());
                                    $r->setAttributeId($item46->getAttributeId());
                                    $r->setProductId($item46->getProductId());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setValues($res);
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setConfigurableOptions($res);
                    $r->setCountryOfManufacture($item1->getCountryOfManufacture());
                    $r->setGiftMessageAvailable($item1->getGiftMessageAvailable());
                    $r->setSpecialPrice($item1->getSpecialPrice());
                    $r->setSpecialFromDate($item1->getSpecialFromDate());
                    $r->setSpecialToDate($item1->getSpecialToDate());
                    $res = [];
                    foreach ($item1->getProductLinks() as $item44) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductLink
                        // to \Magento\CatalogStorefrontApi\Proto\ProductLink
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductLink $item44 **/
                        $p = function () use ($item44) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\ProductLink();
                            $r->setLinkedProductSku($item44->getLinkedProductSku());
                            $r->setTypeId($item44->getTypeId());
                            $r->setLinkedProductType($item44->getLinkedProductType());
                            $r->setLinkTypeId($item44->getLinkTypeId());
                            $r->setPosition($item44->getPosition());
                            $r->setSku($item44->getSku());
                            $r->setProductId($item44->getProductId());
                            $r->setLinkType($item44->getLinkType());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setProductLinks($res);
                    $r->setCanonicalUrl($item1->getCanonicalUrl());
                    $r->setPriceView($item1->getPriceView());
                    $r->setLinksPurchasedSeparately($item1->getLinksPurchasedSeparately());
                    $r->setOnlyXLeftInStock($item1->getOnlyXLeftInStock());
                    $res = [];
                    foreach ($item1->getGroupedItems() as $item49) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\GroupedItem
                        // to \Magento\CatalogStorefrontApi\Proto\GroupedItem
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\GroupedItem $item49 **/
                        $p = function () use ($item49) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\GroupedItem();
                            $r->setQty($item49->getQty());
                            $r->setPosition($item49->getPosition());
                            $r->setProduct($item49->getProduct());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setGroupedItems($res);
                    $res = [];
                    foreach ($item1->getProductOptions() as $item50) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductOption
                        // to \Magento\CatalogStorefrontApi\Proto\ProductOption
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductOption $item50 **/
                        $p = function () use ($item50) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\ProductOption();
                            $r->setId($item50->getId());
                            $r->setLabel($item50->getLabel());
                            $r->setSortOrder($item50->getSortOrder());
                            $r->setRequired($item50->getRequired());
                            $r->setRenderType($item50->getRenderType());
                            $r->setType($item50->getType());
                            $res = [];
                            foreach ($item50->getValues() as $item57) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue
                                // to \Magento\CatalogStorefrontApi\Proto\ProductOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductOptionValue $item57 **/
                                $p = function () use ($item57) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\ProductOptionValue();
                                    $r->setId($item57->getId());
                                    $r->setLabel($item57->getLabel());
                                    $r->setSortOrder($item57->getSortOrder());
                                    $r->setDefault($item57->getDefault());
                                    $r->setImageUrl($item57->getImageUrl());
                                    $r->setQtyMutability($item57->getQtyMutability());
                                    $r->setQty($item57->getQty());
                                    $r->setInfoUrl($item57->getInfoUrl());
                                    $r->setPrice($item57->getPrice());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setValues($res);
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setProductOptions($res);
                    $res = [];
                    foreach ($item1->getShopperInputOptions() as $item51) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption
                        // to \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductShopperInputOption $item51 **/
                        $p = function () use ($item51) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\ProductShopperInputOption();
                            $r->setId($item51->getId());
                            $r->setLabel($item51->getLabel());
                            $r->setSortOrder($item51->getSortOrder());
                            $r->setRequired($item51->getRequired());
                            $r->setRenderType($item51->getRenderType());
                            $res = [];
                            foreach ($item51->getPrice() as $item57) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Price
                                // to \Magento\CatalogStorefrontApi\Proto\Price
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\Price $item57 **/
                                $p = function () use ($item57) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\Price();
                                    $r->setRegularPrice($item57->getRegularPrice());
                                    $r->setFinalPrice($item57->getFinalPrice());
                                    $r->setScope($item57->getScope());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setPrice($res);
                            $r->setValue($item51->getValue());
                            $r->setMaxCharacters($item51->getMaxCharacters());
                            $values = [];
                            foreach ($item51->getFileExtension() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setFileExtension($values);
                            $r->setImageSizeX($item51->getImageSizeX());
                            $r->setImageSizeY($item51->getImageSizeY());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setShopperInputOptions($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setProducts($res);
            $r->setStore($value->getStore());
            $prop3 = $value->getParams();
            if ($prop3 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\KeyValue
                // to \Magento\CatalogStorefrontApi\Proto\KeyValue
                /** @var \Magento\CatalogStorefrontApi\Api\Data\KeyValue $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\KeyValue();
                    $r->setKey($prop3->getKey());
                    $r->setValue($prop3->getValue());
                    return $r;
                };
                $proto = $p();
                $r->setParams($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for importProducts method
     *
     * @param ImportProductsResponse $value
     * @return ImportProductsResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function importProductsFromProto(ImportProductsResponse $value): ImportProductsResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param DeleteProductsRequestInterface $request
     * @return DeleteProductsResponseInterface
     * @throws \Throwable
     */
    public function deleteProducts(DeleteProductsRequestInterface $request): DeleteProductsResponseInterface
    {
        $protoRequest = $this->deleteProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->deleteProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->deleteProductsFromProto($protoResult);
    }

    /**
     * Autogenerated description for deleteProducts method
     *
     * @param DeleteProductsRequestInterface $value
     * @return DeleteProductsRequest
     */
    private function deleteProductsToProto(DeleteProductsRequestInterface $value): DeleteProductsRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsRequest
        // to \Magento\CatalogStorefrontApi\Proto\DeleteProductsRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteProductsRequest();
            $values = [];
            foreach ($value->getProductIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setProductIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deleteProducts method
     *
     * @param DeleteProductsResponse $value
     * @return DeleteProductsResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deleteProductsFromProto(DeleteProductsResponse $value): DeleteProductsResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteProductsResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteProductsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteProductsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param DeleteCategoriesRequestInterface $request
     * @return DeleteCategoriesResponseInterface
     * @throws \Throwable
     */
    public function deleteCategories(DeleteCategoriesRequestInterface $request): DeleteCategoriesResponseInterface
    {
        $protoRequest = $this->deleteCategoriesToProto($request);
        [$protoResult, $status] = $this->protoClient->deleteCategories($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->deleteCategoriesFromProto($protoResult);
    }

    /**
     * Autogenerated description for deleteCategories method
     *
     * @param DeleteCategoriesRequestInterface $value
     * @return DeleteCategoriesRequest
     */
    private function deleteCategoriesToProto(DeleteCategoriesRequestInterface $value): DeleteCategoriesRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesRequest
        // to \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesRequest();
            $values = [];
            foreach ($value->getCategoryIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setCategoryIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deleteCategories method
     *
     * @param DeleteCategoriesResponse $value
     * @return DeleteCategoriesResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deleteCategoriesFromProto(DeleteCategoriesResponse $value): DeleteCategoriesResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\DeleteCategoriesResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\DeleteCategoriesResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ImportCategoriesRequestInterface $request
     * @return ImportCategoriesResponseInterface
     * @throws \Throwable
     */
    public function importCategories(ImportCategoriesRequestInterface $request): ImportCategoriesResponseInterface
    {
        $protoRequest = $this->importCategoriesToProto($request);
        [$protoResult, $status] = $this->protoClient->importCategories($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->importCategoriesFromProto($protoResult);
    }

    /**
     * Autogenerated description for importCategories method
     *
     * @param ImportCategoriesRequestInterface $value
     * @return ImportCategoriesRequest
     */
    private function importCategoriesToProto(ImportCategoriesRequestInterface $value): ImportCategoriesRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesRequest
        // to \Magento\CatalogStorefrontApi\Proto\ImportCategoriesRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportCategoriesRequest();
            $res = [];
            foreach ($value->getCategories() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Category
                // to \Magento\CatalogStorefrontApi\Proto\Category
                /** @var \Magento\CatalogStorefrontApi\Api\Data\Category $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\Category();
                    $r->setId($item1->getId());
                    $r->setPath($item1->getPath());
                    $r->setPosition($item1->getPosition());
                    $r->setLevel($item1->getLevel());
                    $r->setChildrenCount($item1->getChildrenCount());
                    $r->setName($item1->getName());
                    $r->setDisplayMode($item1->getDisplayMode());
                    $r->setDefaultSortBy($item1->getDefaultSortBy());
                    $r->setUrlKey($item1->getUrlKey());
                    $r->setUrlPath($item1->getUrlPath());
                    $r->setIsActive($item1->getIsActive());
                    $r->setIsAnchor($item1->getIsAnchor());
                    $r->setIncludeInMenu($item1->getIncludeInMenu());
                    $values = [];
                    foreach ($item1->getAvailableSortBy() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setAvailableSortBy($values);
                    $res = [];
                    foreach ($item1->getBreadcrumbs() as $item16) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb
                        // to \Magento\CatalogStorefrontApi\Proto\Breadcrumb
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb $item16 **/
                        $p = function () use ($item16) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Breadcrumb();
                            $r->setCategoryId($item16->getCategoryId());
                            $r->setCategoryName($item16->getCategoryName());
                            $r->setCategoryLevel($item16->getCategoryLevel());
                            $r->setCategoryUrlKey($item16->getCategoryUrlKey());
                            $r->setCategoryUrlPath($item16->getCategoryUrlPath());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setBreadcrumbs($res);
                    $r->setDescription($item1->getDescription());
                    $r->setCanonicalUrl($item1->getCanonicalUrl());
                    $r->setProductCount($item1->getProductCount());
                    $values = [];
                    foreach ($item1->getChildren() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setChildren($values);
                    $r->setImage($item1->getImage());
                    $r->setParentId($item1->getParentId());
                    $r->setMetaTitle($item1->getMetaTitle());
                    $r->setMetaDescription($item1->getMetaDescription());
                    $r->setMetaKeywords($item1->getMetaKeywords());
                    $res = [];
                    foreach ($item1->getDynamicAttributes() as $item26) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue
                        // to \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue $item26 **/
                        $p = function () use ($item26) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue();
                            $r->setCode($item26->getCode());
                            $r->setValue($item26->getValue());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setDynamicAttributes($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setCategories($res);
            $r->setStore($value->getStore());
            $prop3 = $value->getParams();
            if ($prop3 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\KeyValue
                // to \Magento\CatalogStorefrontApi\Proto\KeyValue
                /** @var \Magento\CatalogStorefrontApi\Api\Data\KeyValue $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\KeyValue();
                    $r->setKey($prop3->getKey());
                    $r->setValue($prop3->getValue());
                    return $r;
                };
                $proto = $p();
                $r->setParams($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for importCategories method
     *
     * @param ImportCategoriesResponse $value
     * @return ImportCategoriesResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function importCategoriesFromProto(ImportCategoriesResponse $value): ImportCategoriesResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportCategoriesResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportCategoriesResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportCategoriesResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param CategoriesGetRequestInterface $request
     * @return CategoriesGetResponseInterface
     * @throws \Throwable
     */
    public function getCategories(CategoriesGetRequestInterface $request): CategoriesGetResponseInterface
    {
        $protoRequest = $this->getCategoriesToProto($request);
        [$protoResult, $status] = $this->protoClient->getCategories($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getCategoriesFromProto($protoResult);
    }

    /**
     * Autogenerated description for getCategories method
     *
     * @param CategoriesGetRequestInterface $value
     * @return CategoriesGetRequest
     */
    private function getCategoriesToProto(CategoriesGetRequestInterface $value): CategoriesGetRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequest
        // to \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setLevel($value->getLevel());
            $r->setStore($value->getStore());
            $values = [];
            foreach ($value->getAttributeCodes() as $newValue) {
                $values[] = $newValue;
            }
            $r->setAttributeCodes($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getCategories method
     *
     * @param CategoriesGetResponse $value
     * @return CategoriesGetResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getCategoriesFromProto(CategoriesGetResponse $value): CategoriesGetResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Category
                // to \Magento\CatalogStorefrontApi\Api\Data\Category
                /** @var \Magento\CatalogStorefrontApi\Proto\Category $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Category();
                    $r->setId($item1->getId());
                    $r->setPath($item1->getPath());
                    $r->setPosition($item1->getPosition());
                    $r->setLevel($item1->getLevel());
                    $r->setChildrenCount($item1->getChildrenCount());
                    $r->setName($item1->getName());
                    $r->setDisplayMode($item1->getDisplayMode());
                    $r->setDefaultSortBy($item1->getDefaultSortBy());
                    $r->setUrlKey($item1->getUrlKey());
                    $r->setUrlPath($item1->getUrlPath());
                    $r->setIsActive($item1->getIsActive());
                    $r->setIsAnchor($item1->getIsAnchor());
                    $r->setIncludeInMenu($item1->getIncludeInMenu());
                    $values = [];
                    foreach ($item1->getAvailableSortBy() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setAvailableSortBy($values);
                    $res = [];
                    foreach ($item1->getBreadcrumbs() as $item16) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Breadcrumb
                        // to \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb
                        /** @var \Magento\CatalogStorefrontApi\Proto\Breadcrumb $item16 **/
                        $p = function () use ($item16) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb();
                            $r->setCategoryId($item16->getCategoryId());
                            $r->setCategoryName($item16->getCategoryName());
                            $r->setCategoryLevel($item16->getCategoryLevel());
                            $r->setCategoryUrlKey($item16->getCategoryUrlKey());
                            $r->setCategoryUrlPath($item16->getCategoryUrlPath());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setBreadcrumbs($res);
                    $r->setDescription($item1->getDescription());
                    $r->setCanonicalUrl($item1->getCanonicalUrl());
                    $r->setProductCount($item1->getProductCount());
                    $values = [];
                    foreach ($item1->getChildren() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setChildren($values);
                    $r->setImage($item1->getImage());
                    $r->setParentId($item1->getParentId());
                    $r->setMetaTitle($item1->getMetaTitle());
                    $r->setMetaDescription($item1->getMetaDescription());
                    $r->setMetaKeywords($item1->getMetaKeywords());
                    $res = [];
                    foreach ($item1->getDynamicAttributes() as $item26) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue
                        // to \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue
                        /** @var \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue $item26 **/
                        $p = function () use ($item26) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue();
                            $r->setCode($item26->getCode());
                            $r->setValue($item26->getValue());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setDynamicAttributes($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ProductVariantsGetRequestInterface $request
     * @return ProductVariantsGetResponseInterface
     * @throws \Throwable
     */
    public function getProductVariants(ProductVariantsGetRequestInterface $request): ProductVariantsGetResponseInterface
    {
        $protoRequest = $this->getProductVariantsToProto($request);
        [$protoResult, $status] = $this->protoClient->getProductVariants($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getProductVariantsFromProto($protoResult);
    }

    /**
     * Autogenerated description for getProductVariants method
     *
     * @param ProductVariantsGetRequestInterface $value
     * @return ProductVariantsGetRequest
     */
    private function getProductVariantsToProto(ProductVariantsGetRequestInterface $value): ProductVariantsGetRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductVariantsGetRequest
        // to \Magento\CatalogStorefrontApi\Proto\ProductVariantsGetRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductVariantsGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductVariantsGetRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setStoreId($value->getStoreId());
            $values = [];
            foreach ($value->getAttributeCodes() as $newValue) {
                $values[] = $newValue;
            }
            $r->setAttributeCodes($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getProductVariants method
     *
     * @param ProductVariantsGetResponse $value
     * @return ProductVariantsGetResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getProductVariantsFromProto(ProductVariantsGetResponse $value): ProductVariantsGetResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductVariantsGetResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductVariantsGetResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductVariantsGetResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductVariantsGetResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Variant
                // to \Magento\CatalogStorefrontApi\Api\Data\Variant
                /** @var \Magento\CatalogStorefrontApi\Proto\Variant $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Variant();
                    $r->setProduct($item1->getProduct());
                    $res = [];
                    foreach ($item1->getAttributes() as $item3) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\VariantAttribute
                        // to \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute
                        /** @var \Magento\CatalogStorefrontApi\Proto\VariantAttribute $item3 **/
                        $p = function () use ($item3) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute();
                            $r->setLabel($item3->getLabel());
                            $r->setCode($item3->getCode());
                            $r->setValueIndex($item3->getValueIndex());
                            $r->setAttributeId($item3->getAttributeId());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setAttributes($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }
}
