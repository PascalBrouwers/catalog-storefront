<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

class Catalog implements CatalogInterface
{
    private $protoClient;

    public function __construct(
        string $hostname,
        array $options,
        ?string $channel = null
    ) {
        $this->protoClient = new \Magento\CatalogStorefrontApi\Proto\CatalogClient($hostname, $options, $channel);
    }

    public function GetProducts(\Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequestInterface $request): \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResultInterface
    {
        $protoRequest = $this->GetProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->GetProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        $result = $this->GetProductsFromProto($protoResult);
        return $result;
    }

    private function GetProductsToProto(\Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequestInterface $value): \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest
        // to \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest();
            $r->setIds($value->getIds());
            $r->setStore($value->getStore());
            $r->setAttributeCodes($value->getAttributeCodes());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    private function GetProductsFromProto(\Magento\CatalogStorefrontApi\Proto\ProductsGetResult $value): \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResultInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductsGetResult
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductsGetResult $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult();
            $res = [];
            foreach ($value->getData() as $item) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Product
                // to \Magento\CatalogStorefrontApi\Api\Data\Product
                /** @var \Magento\CatalogStorefrontApi\Proto\Product $item **/
                $p = function () use ($item) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Product();
                    $r->setEntityId($item->getEntityId());
                    $r->setAttributeSetId($item->getAttributeSetId());
                    $r->setHasOptions($item->getHasOptions());
                    $r->setId($item->getId());
                    $r->setSku($item->getSku());
                    $r->setTypeId($item->getTypeId());
                    $r->setStatus($item->getStatus());
                    $r->setStockStatus($item->getStockStatus());
                    $r->setName($item->getName());
                    $r->setDescription($item->getDescription());
                    $r->setShortDescription($item->getShortDescription());
                    $r->setUrlKey($item->getUrlKey());
                    $r->setMetaDescription($item->getMetaDescription());
                    $r->setMetaKeyword($item->getMetaKeyword());
                    $r->setMetaTitle($item->getMetaTitle());
                    $r->setTaxClassId($item->getTaxClassId());
                    $r->setWeight($item->getWeight());
                    $prop19 = $item->getImage();
                    if ($prop19 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop19 **/
                        $p = function () use ($prop19) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop19->getUrl());
                            $r->setLabel($prop19->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setImage($out);
                    }

                    $prop20 = $item->getSmallImage();
                    if ($prop20 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop20 **/
                        $p = function () use ($prop20) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop20->getUrl());
                            $r->setLabel($prop20->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setSmallImage($out);
                    }

                    $prop21 = $item->getThumbnail();
                    if ($prop21 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop21 **/
                        $p = function () use ($prop21) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop21->getUrl());
                            $r->setLabel($prop21->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setThumbnail($out);
                    }

                    $r->setVisibility($item->getVisibility());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setData($res);

            return $r;
        };
        $out = $p();

        return $out;
    }

    public function ImportProducts(\Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequestInterface $request): \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponseInterface
    {
        $protoRequest = $this->ImportProductsToProto($request);
        [$protoResult, $status] = $this->protoClient->ImportProducts($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        $result = $this->ImportProductsFromProto($protoResult);
        return $result;
    }

    private function ImportProductsToProto(\Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequestInterface $value): \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest
        // to \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest();
            $res = [];
            foreach ($value->getProducts() as $item) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Product
                // to \Magento\CatalogStorefrontApi\Proto\Product
                /** @var \Magento\CatalogStorefrontApi\Api\Data\Product $item **/
                $p = function () use ($item) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\Product();
                    $r->setEntityId($item->getEntityId());
                    $r->setAttributeSetId($item->getAttributeSetId());
                    $r->setHasOptions($item->getHasOptions());
                    $r->setId($item->getId());
                    $r->setSku($item->getSku());
                    $r->setTypeId($item->getTypeId());
                    $r->setStatus($item->getStatus());
                    $r->setStockStatus($item->getStockStatus());
                    $r->setName($item->getName());
                    $r->setDescription($item->getDescription());
                    $r->setShortDescription($item->getShortDescription());
                    $r->setUrlKey($item->getUrlKey());
                    $r->setMetaDescription($item->getMetaDescription());
                    $r->setMetaKeyword($item->getMetaKeyword());
                    $r->setMetaTitle($item->getMetaTitle());
                    $r->setTaxClassId($item->getTaxClassId());
                    $r->setWeight($item->getWeight());
                    $prop19 = $item->getImage();
                    if ($prop19 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $prop19 **/
                        $p = function () use ($prop19) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $r->setUrl($prop19->getUrl());
                            $r->setLabel($prop19->getLabel());
                            return $r;
                        };
                        $proto = $p();
                        $r->setImage($proto);
                    }

                    $prop20 = $item->getSmallImage();
                    if ($prop20 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $prop20 **/
                        $p = function () use ($prop20) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $r->setUrl($prop20->getUrl());
                            $r->setLabel($prop20->getLabel());
                            return $r;
                        };
                        $proto = $p();
                        $r->setSmallImage($proto);
                    }

                    $prop21 = $item->getThumbnail();
                    if ($prop21 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $prop21 **/
                        $p = function () use ($prop21) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $r->setUrl($prop21->getUrl());
                            $r->setLabel($prop21->getLabel());
                            return $r;
                        };
                        $proto = $p();
                        $r->setThumbnail($proto);
                    }

                    $r->setVisibility($item->getVisibility());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setProducts($res);

            $r->setStore($value->getStore());
            $prop3 = $value->getParams();
            if ($prop3 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\KeyValue
                // to \Magento\CatalogStorefrontApi\Proto\KeyValue
                /** @var \Magento\CatalogStorefrontApi\Api\Data\KeyValue $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\KeyValue();
                    $r->setKey($prop3->getKey());
                    $r->setValue($prop3->getValue());
                    return $r;
                };
                $proto = $p();
                $r->setParams($proto);
            }

            return $r;
        };
        $proto = $p();

        return $proto;
    }

    private function ImportProductsFromProto(\Magento\CatalogStorefrontApi\Proto\ImportProductsResponse $value): \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponseInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse();
            $res = [];
            foreach ($value->getData() as $item) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Product
                // to \Magento\CatalogStorefrontApi\Api\Data\Product
                /** @var \Magento\CatalogStorefrontApi\Proto\Product $item **/
                $p = function () use ($item) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Product();
                    $r->setEntityId($item->getEntityId());
                    $r->setAttributeSetId($item->getAttributeSetId());
                    $r->setHasOptions($item->getHasOptions());
                    $r->setId($item->getId());
                    $r->setSku($item->getSku());
                    $r->setTypeId($item->getTypeId());
                    $r->setStatus($item->getStatus());
                    $r->setStockStatus($item->getStockStatus());
                    $r->setName($item->getName());
                    $r->setDescription($item->getDescription());
                    $r->setShortDescription($item->getShortDescription());
                    $r->setUrlKey($item->getUrlKey());
                    $r->setMetaDescription($item->getMetaDescription());
                    $r->setMetaKeyword($item->getMetaKeyword());
                    $r->setMetaTitle($item->getMetaTitle());
                    $r->setTaxClassId($item->getTaxClassId());
                    $r->setWeight($item->getWeight());
                    $prop19 = $item->getImage();
                    if ($prop19 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop19 **/
                        $p = function () use ($prop19) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop19->getUrl());
                            $r->setLabel($prop19->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setImage($out);
                    }

                    $prop20 = $item->getSmallImage();
                    if ($prop20 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop20 **/
                        $p = function () use ($prop20) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop20->getUrl());
                            $r->setLabel($prop20->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setSmallImage($out);
                    }

                    $prop21 = $item->getThumbnail();
                    if ($prop21 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop21 **/
                        $p = function () use ($prop21) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop21->getUrl());
                            $r->setLabel($prop21->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setThumbnail($out);
                    }

                    $r->setVisibility($item->getVisibility());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setData($res);

            return $r;
        };
        $out = $p();

        return $out;
    }
}
