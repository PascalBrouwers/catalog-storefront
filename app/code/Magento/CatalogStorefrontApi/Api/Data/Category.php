<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api\Data;

final class Category implements CategoryInterface
{
    /**
     * @var string
     */
    private $id;
    /**
     * @var string
     */
    private $path;
    /**
     * @var int
     */
    private $position;
    /**
     * @var int
     */
    private $level;
    /**
     * @var int
     */
    private $childrenCount;
    /**
     * @var string
     */
    private $name;
    /**
     * @var string
     */
    private $displayMode;
    /**
     * @var string
     */
    private $defaultSortBy;
    /**
     * @var string
     */
    private $urlKey;
    /**
     * @var string
     */
    private $urlPath;
    /**
     * @var bool
     */
    private $isActive;
    /**
     * @var bool
     */
    private $isAnchor;
    /**
     * @var bool
     */
    private $includeInMenu;
    /**
     * @var array
     */
    private $availableSortBy;
    /**
     * @var array
     */
    private $breadcrumbs;
    /**
     * @var string
     */
    private $description;
    /**
     * @var string
     */
    private $canonicalUrl;
    /**
     * @var int
     */
    private $productCount;
    /**
     * @var array
     */
    private $children;
    /**
     * @var string
     */
    private $image;
    /**
     * @var string
     */
    private $parentId;
    /**
     * @var array
     */
    private $dynamicAttributes;


    /**
     * @return string
     */
    public function getId(): string
    {
        return (string) $this->id;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setId(string $value): void
    {
        $this->id = $value;
    }

    /**
     * @return string
     */
    public function getPath(): string
    {
        return (string) $this->path;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setPath(string $value): void
    {
        $this->path = $value;
    }

    /**
     * @return int
     */
    public function getPosition(): int
    {
        return (int) $this->position;
    }
    
    /**
     * @param int $value
     * @return void
     */
    public function setPosition(int $value): void
    {
        $this->position = $value;
    }

    /**
     * @return int
     */
    public function getLevel(): int
    {
        return (int) $this->level;
    }
    
    /**
     * @param int $value
     * @return void
     */
    public function setLevel(int $value): void
    {
        $this->level = $value;
    }

    /**
     * @return int
     */
    public function getChildrenCount(): int
    {
        return (int) $this->childrenCount;
    }
    
    /**
     * @param int $value
     * @return void
     */
    public function setChildrenCount(int $value): void
    {
        $this->childrenCount = $value;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return (string) $this->name;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setName(string $value): void
    {
        $this->name = $value;
    }

    /**
     * @return string
     */
    public function getDisplayMode(): string
    {
        return (string) $this->displayMode;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setDisplayMode(string $value): void
    {
        $this->displayMode = $value;
    }

    /**
     * @return string
     */
    public function getDefaultSortBy(): string
    {
        return (string) $this->defaultSortBy;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setDefaultSortBy(string $value): void
    {
        $this->defaultSortBy = $value;
    }

    /**
     * @return string
     */
    public function getUrlKey(): string
    {
        return (string) $this->urlKey;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setUrlKey(string $value): void
    {
        $this->urlKey = $value;
    }

    /**
     * @return string
     */
    public function getUrlPath(): string
    {
        return (string) $this->urlPath;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setUrlPath(string $value): void
    {
        $this->urlPath = $value;
    }

    /**
     * @return bool
     */
    public function getIsActive(): bool
    {
        return (bool) $this->isActive;
    }
    
    /**
     * @param bool $value
     * @return void
     */
    public function setIsActive(bool $value): void
    {
        $this->isActive = $value;
    }

    /**
     * @return bool
     */
    public function getIsAnchor(): bool
    {
        return (bool) $this->isAnchor;
    }
    
    /**
     * @param bool $value
     * @return void
     */
    public function setIsAnchor(bool $value): void
    {
        $this->isAnchor = $value;
    }

    /**
     * @return bool
     */
    public function getIncludeInMenu(): bool
    {
        return (bool) $this->includeInMenu;
    }
    
    /**
     * @param bool $value
     * @return void
     */
    public function setIncludeInMenu(bool $value): void
    {
        $this->includeInMenu = $value;
    }

    /**
     * @return string[]
     */
    public function getAvailableSortBy(): array
    {
        return (array) $this->availableSortBy;
    }
    
    /**
     * @param string[] $value
     * @return void
     */
    public function setAvailableSortBy(array $value): void
    {
        $this->availableSortBy = $value;
    }

    /**
     * @return \Magento\CatalogStorefrontApi\Api\Data\BreadcrumbInterface[]
     */
    public function getBreadcrumbs(): array
    {
        return (array) $this->breadcrumbs;
    }
    
    /**
     * @param \Magento\CatalogStorefrontApi\Api\Data\BreadcrumbInterface[] $value
     * @return void
     */
    public function setBreadcrumbs(array $value): void
    {
        $this->breadcrumbs = $value;
    }

    /**
     * @return string
     */
    public function getDescription(): string
    {
        return (string) $this->description;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setDescription(string $value): void
    {
        $this->description = $value;
    }

    /**
     * @return string
     */
    public function getCanonicalUrl(): string
    {
        return (string) $this->canonicalUrl;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setCanonicalUrl(string $value): void
    {
        $this->canonicalUrl = $value;
    }

    /**
     * @return int
     */
    public function getProductCount(): int
    {
        return (int) $this->productCount;
    }
    
    /**
     * @param int $value
     * @return void
     */
    public function setProductCount(int $value): void
    {
        $this->productCount = $value;
    }

    /**
     * @return string[]
     */
    public function getChildren(): array
    {
        return (array) $this->children;
    }
    
    /**
     * @param string[] $value
     * @return void
     */
    public function setChildren(array $value): void
    {
        $this->children = $value;
    }

    /**
     * @return string
     */
    public function getImage(): string
    {
        return (string) $this->image;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setImage(string $value): void
    {
        $this->image = $value;
    }

    /**
     * @return string
     */
    public function getParentId(): string
    {
        return (string) $this->parentId;
    }
    
    /**
     * @param string $value
     * @return void
     */
    public function setParentId(string $value): void
    {
        $this->parentId = $value;
    }

    /**
     * @return \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValueInterface[]
     */
    public function getDynamicAttributes(): array
    {
        return (array) $this->dynamicAttributes;
    }
    
    /**
     * @param \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValueInterface[] $value
     * @return void
     */
    public function setDynamicAttributes(array $value): void
    {
        $this->dynamicAttributes = $value;
    }
}
