<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\CatalogStorefrontApi\Api;

class CatalogProxyServer implements \Magento\CatalogStorefrontApi\Proto\CatalogInterface
{
    private $service;

    public function __construct(
        CatalogServerInterface $service
    ) {
        $this->service = $service;
    }

    public function GetProducts(\Spiral\GRPC\ContextInterface $ctx, \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest $in): \Magento\CatalogStorefrontApi\Proto\ProductsGetResult
    {
        try {
            $magentoDtoRequest = $this->GetProductsFromProto($in);
            $magentoDtoResponse = $this->service->GetProducts($magentoDtoRequest);
            return $this->GetProductsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    private function GetProductsFromProto(\Magento\CatalogStorefrontApi\Proto\ProductsGetRequest $value): \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ProductsGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ProductsGetRequest();
            $r->setIds($value->getIds());
            $r->setStore($value->getStore());
            $r->setAttributeCodes($value->getAttributeCodes());
            return $r;
        };
        $out = $p();

        return $out;
    }

    private function GetProductsToProto(\Magento\CatalogStorefrontApi\Api\Data\ProductsGetResultInterface $value): \Magento\CatalogStorefrontApi\Proto\ProductsGetResult
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult
        // to \Magento\CatalogStorefrontApi\Proto\ProductsGetResult
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ProductsGetResult $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ProductsGetResult();
            $res = [];
            foreach ($value->getItems() as $item) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Product
                // to \Magento\CatalogStorefrontApi\Proto\Product
                /** @var \Magento\CatalogStorefrontApi\Api\Data\Product $item **/
                $p = function () use ($item) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\Product();
                    $r->setId($item->getId());
                    $r->setAttributeSetId($item->getAttributeSetId());
                    $r->setHasOptions($item->getHasOptions());
                    $r->setCreatedAt($item->getCreatedAt());
                    $r->setUpdatedAt($item->getUpdatedAt());
                    $r->setSku($item->getSku());
                    $r->setTypeId($item->getTypeId());
                    $r->setStatus($item->getStatus());
                    $r->setStockStatus($item->getStockStatus());
                    $r->setName($item->getName());
                    $r->setDescription($item->getDescription());
                    $r->setShortDescription($item->getShortDescription());
                    $r->setUrlKey($item->getUrlKey());
                    $r->setTaxClassId($item->getTaxClassId());
                    $r->setWeight($item->getWeight());
                    $prop17 = $item->getImage();
                    if ($prop17 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $prop17 **/
                        $p = function () use ($prop17) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $r->setUrl($prop17->getUrl());
                            $r->setLabel($prop17->getLabel());
                            return $r;
                        };
                        $proto = $p();
                        $r->setImage($proto);
                    }

                    $prop18 = $item->getSmallImage();
                    if ($prop18 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $prop18 **/
                        $p = function () use ($prop18) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $r->setUrl($prop18->getUrl());
                            $r->setLabel($prop18->getLabel());
                            return $r;
                        };
                        $proto = $p();
                        $r->setSmallImage($proto);
                    }

                    $prop19 = $item->getThumbnail();
                    if ($prop19 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Image
                        // to \Magento\CatalogStorefrontApi\Proto\Image
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Image $prop19 **/
                        $p = function () use ($prop19) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Image();
                            $r->setUrl($prop19->getUrl());
                            $r->setLabel($prop19->getLabel());
                            return $r;
                        };
                        $proto = $p();
                        $r->setThumbnail($proto);
                    }

                    $r->setSwatchImage($item->getSwatchImage());
                    $r->setVisibility($item->getVisibility());
                    $res = [];
                    foreach ($item->getDynamicAttributes() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue
                        // to \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue();
                            $r->setCode($item->getCode());
                            $r->setValue($item->getValue());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setDynamicAttributes($res);

                    $r->setMetaDescription($item->getMetaDescription());
                    $r->setMetaKeyword($item->getMetaKeyword());
                    $r->setMetaTitle($item->getMetaTitle());
                    $r->setRequiredOptions($item->getRequiredOptions());
                    $r->setCreatedIn($item->getCreatedIn());
                    $r->setUpdatedIn($item->getUpdatedIn());
                    $r->setQuantityAndStockStatus($item->getQuantityAndStockStatus());
                    $r->setOptionsContainer($item->getOptionsContainer());
                    $r->setMsrpDisplayActualPriceType($item->getMsrpDisplayActualPriceType());
                    $r->setIsReturnable($item->getIsReturnable());
                    $r->setUrlSuffix($item->getUrlSuffix());
                    $res = [];
                    foreach ($item->getOptions() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Option
                        // to \Magento\CatalogStorefrontApi\Proto\Option
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Option $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Option();
                            $r->setOptionId($item->getOptionId());
                            $r->setProductId($item->getProductId());
                            $r->setType($item->getType());
                            $r->setIsRequire($item->getIsRequire());
                            $r->setSku($item->getSku());
                            $r->setMaxCharactersstring($item->getMaxCharactersstring());
                            $r->setFileExtensionstring($item->getFileExtensionstring());
                            $r->setImageSizeXstring($item->getImageSizeXstring());
                            $r->setImageSizeYstring($item->getImageSizeYstring());
                            $r->setSortOrder($item->getSortOrder());
                            $r->setDefaultTitle($item->getDefaultTitle());
                            $r->setStoreTitle($item->getStoreTitle());
                            $r->setTitle($item->getTitle());
                            $r->setDefaultPrice($item->getDefaultPrice());
                            $r->setDefaultPriceType($item->getDefaultPriceType());
                            $r->setStorePricestring($item->getStorePricestring());
                            $r->setStorePriceTypestring($item->getStorePriceTypestring());
                            $r->setPrice($item->getPrice());
                            $r->setPriceType($item->getPriceType());
                            $r->setRequired($item->getRequired());
                            $r->setProductSku($item->getProductSku());
                            $res = [];
                            foreach ($item->getValue() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                // to \Magento\CatalogStorefrontApi\Proto\OptionValue
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\OptionValue $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\OptionValue();
                                    $r->setOptionId($item->getOptionId());
                                    $r->setProductId($item->getProductId());
                                    $r->setType($item->getType());
                                    $r->setIsRequire($item->getIsRequire());
                                    $r->setSku($item->getSku());
                                    $r->setMaxCharacters($item->getMaxCharacters());
                                    $r->setFileExtension($item->getFileExtension());
                                    $r->setImageSizeX($item->getImageSizeX());
                                    $r->setImageSizeY($item->getImageSizeY());
                                    $r->setSortOrder($item->getSortOrder());
                                    $r->setDefaultTitle($item->getDefaultTitle());
                                    $r->setStoreTitle($item->getStoreTitle());
                                    $r->setTitle($item->getTitle());
                                    $r->setDefaultPrice($item->getDefaultPrice());
                                    $r->setDefaultPriceType($item->getDefaultPriceType());
                                    $r->setStorePrice($item->getStorePrice());
                                    $r->setStorePriceType($item->getStorePriceType());
                                    $r->setPrice($item->getPrice());
                                    $r->setPriceType($item->getPriceType());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setValue($res);

                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setOptions($res);

                    $res = [];
                    foreach ($item->getUrlRewrites() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite
                        // to \Magento\CatalogStorefrontApi\Proto\UrlRewrite
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\UrlRewrite();
                            $r->setUrl($item->getUrl());
                            $res = [];
                            foreach ($item->getParameters() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter
                                // to \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter();
                                    $r->setName($item->getName());
                                    $r->setValue($item->getValue());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setParameters($res);

                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setUrlRewrites($res);

                    $res = [];
                    foreach ($item->getVariants() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Variant
                        // to \Magento\CatalogStorefrontApi\Proto\Variant
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Variant $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Variant();
                            $r->setProduct($item->getProduct());
                            $res = [];
                            foreach ($item->getAttributes() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute
                                // to \Magento\CatalogStorefrontApi\Proto\VariantAttribute
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\VariantAttribute();
                                    $r->setLabel($item->getLabel());
                                    $r->setCode($item->getCode());
                                    $r->setValueIndex($item->getValueIndex());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setAttributes($res);

                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setVariants($res);

                    $res = [];
                    foreach ($item->getConfigurableOptions() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption
                        // to \Magento\CatalogStorefrontApi\Proto\ConfigurableOption
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\ConfigurableOption();
                            $r->setId($item->getId());
                            $r->setLabel($item->getLabel());
                            $r->setPosition($item->getPosition());
                            $r->setUseDefault($item->getUseDefault());
                            $r->setProductId($item->getProductId());
                            $r->setAttributeCode($item->getAttributeCode());
                            $r->setAttributeId($item->getAttributeId());
                            $res = [];
                            foreach ($item->getValues() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue
                                // to \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue();
                                    $r->setValueIndex($item->getValueIndex());
                                    $r->setLabel($item->getLabel());
                                    $r->setDefaultLabel($item->getDefaultLabel());
                                    $r->setStoreLabel($item->getStoreLabel());
                                    $r->setUseDefaultValue($item->getUseDefaultValue());
                                    $r->setAttributeId($item->getAttributeId());
                                    $r->setProductId($item->getProductId());
                                    return $r;
                                };
                                $proto = $p();
                                $res[] = $proto;
                            }
                            $r->setValues($res);

                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setConfigurableOptions($res);

                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setItems($res);

            return $r;
        };
        $proto = $p();

        return $proto;
    }


    public function ImportProducts(\Spiral\GRPC\ContextInterface $ctx, \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest $in): \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse
    {
        try {
            $magentoDtoRequest = $this->ImportProductsFromProto($in);
            $magentoDtoResponse = $this->service->ImportProducts($magentoDtoRequest);
            return $this->ImportProductsToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    private function ImportProductsFromProto(\Magento\CatalogStorefrontApi\Proto\ImportProductsRequest $value): \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\ImportProductsRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\ImportProductsRequest();
            $res = [];
            foreach ($value->getProducts() as $item) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\Product
                // to \Magento\CatalogStorefrontApi\Api\Data\Product
                /** @var \Magento\CatalogStorefrontApi\Proto\Product $item **/
                $p = function () use ($item) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\Product();
                    $r->setId($item->getId());
                    $r->setAttributeSetId($item->getAttributeSetId());
                    $r->setHasOptions($item->getHasOptions());
                    $r->setCreatedAt($item->getCreatedAt());
                    $r->setUpdatedAt($item->getUpdatedAt());
                    $r->setSku($item->getSku());
                    $r->setTypeId($item->getTypeId());
                    $r->setStatus($item->getStatus());
                    $r->setStockStatus($item->getStockStatus());
                    $r->setName($item->getName());
                    $r->setDescription($item->getDescription());
                    $r->setShortDescription($item->getShortDescription());
                    $r->setUrlKey($item->getUrlKey());
                    $r->setTaxClassId($item->getTaxClassId());
                    $r->setWeight($item->getWeight());
                    $prop17 = $item->getImage();
                    if ($prop17 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop17 **/
                        $p = function () use ($prop17) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop17->getUrl());
                            $r->setLabel($prop17->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setImage($out);
                    }

                    $prop18 = $item->getSmallImage();
                    if ($prop18 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop18 **/
                        $p = function () use ($prop18) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop18->getUrl());
                            $r->setLabel($prop18->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setSmallImage($out);
                    }

                    $prop19 = $item->getThumbnail();
                    if ($prop19 !== null) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Image
                        // to \Magento\CatalogStorefrontApi\Api\Data\Image
                        /** @var \Magento\CatalogStorefrontApi\Proto\Image $prop19 **/
                        $p = function () use ($prop19) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Image();
                            $r->setUrl($prop19->getUrl());
                            $r->setLabel($prop19->getLabel());
                            return $r;
                        };
                        $out = $p();
                        $r->setThumbnail($out);
                    }

                    $r->setSwatchImage($item->getSwatchImage());
                    $r->setVisibility($item->getVisibility());
                    $res = [];
                    foreach ($item->getDynamicAttributes() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue
                        // to \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue
                        /** @var \Magento\CatalogStorefrontApi\Proto\DynamicAttributeValue $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\DynamicAttributeValue();
                            $r->setCode($item->getCode());
                            $r->setValue($item->getValue());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setDynamicAttributes($res);

                    $r->setMetaDescription($item->getMetaDescription());
                    $r->setMetaKeyword($item->getMetaKeyword());
                    $r->setMetaTitle($item->getMetaTitle());
                    $r->setRequiredOptions($item->getRequiredOptions());
                    $r->setCreatedIn($item->getCreatedIn());
                    $r->setUpdatedIn($item->getUpdatedIn());
                    $r->setQuantityAndStockStatus($item->getQuantityAndStockStatus());
                    $r->setOptionsContainer($item->getOptionsContainer());
                    $r->setMsrpDisplayActualPriceType($item->getMsrpDisplayActualPriceType());
                    $r->setIsReturnable($item->getIsReturnable());
                    $r->setUrlSuffix($item->getUrlSuffix());
                    $res = [];
                    foreach ($item->getOptions() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Option
                        // to \Magento\CatalogStorefrontApi\Api\Data\Option
                        /** @var \Magento\CatalogStorefrontApi\Proto\Option $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Option();
                            $r->setOptionId($item->getOptionId());
                            $r->setProductId($item->getProductId());
                            $r->setType($item->getType());
                            $r->setIsRequire($item->getIsRequire());
                            $r->setSku($item->getSku());
                            $r->setMaxCharactersstring($item->getMaxCharactersstring());
                            $r->setFileExtensionstring($item->getFileExtensionstring());
                            $r->setImageSizeXstring($item->getImageSizeXstring());
                            $r->setImageSizeYstring($item->getImageSizeYstring());
                            $r->setSortOrder($item->getSortOrder());
                            $r->setDefaultTitle($item->getDefaultTitle());
                            $r->setStoreTitle($item->getStoreTitle());
                            $r->setTitle($item->getTitle());
                            $r->setDefaultPrice($item->getDefaultPrice());
                            $r->setDefaultPriceType($item->getDefaultPriceType());
                            $r->setStorePricestring($item->getStorePricestring());
                            $r->setStorePriceTypestring($item->getStorePriceTypestring());
                            $r->setPrice($item->getPrice());
                            $r->setPriceType($item->getPriceType());
                            $r->setRequired($item->getRequired());
                            $r->setProductSku($item->getProductSku());
                            $res = [];
                            foreach ($item->getValue() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\OptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\OptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\OptionValue $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\OptionValue();
                                    $r->setOptionId($item->getOptionId());
                                    $r->setProductId($item->getProductId());
                                    $r->setType($item->getType());
                                    $r->setIsRequire($item->getIsRequire());
                                    $r->setSku($item->getSku());
                                    $r->setMaxCharacters($item->getMaxCharacters());
                                    $r->setFileExtension($item->getFileExtension());
                                    $r->setImageSizeX($item->getImageSizeX());
                                    $r->setImageSizeY($item->getImageSizeY());
                                    $r->setSortOrder($item->getSortOrder());
                                    $r->setDefaultTitle($item->getDefaultTitle());
                                    $r->setStoreTitle($item->getStoreTitle());
                                    $r->setTitle($item->getTitle());
                                    $r->setDefaultPrice($item->getDefaultPrice());
                                    $r->setDefaultPriceType($item->getDefaultPriceType());
                                    $r->setStorePrice($item->getStorePrice());
                                    $r->setStorePriceType($item->getStorePriceType());
                                    $r->setPrice($item->getPrice());
                                    $r->setPriceType($item->getPriceType());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValue($res);

                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setOptions($res);

                    $res = [];
                    foreach ($item->getUrlRewrites() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\UrlRewrite
                        // to \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite
                        /** @var \Magento\CatalogStorefrontApi\Proto\UrlRewrite $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\UrlRewrite();
                            $r->setUrl($item->getUrl());
                            $res = [];
                            foreach ($item->getParameters() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter
                                // to \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter
                                /** @var \Magento\CatalogStorefrontApi\Proto\UrlRewriteParameter $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\UrlRewriteParameter();
                                    $r->setName($item->getName());
                                    $r->setValue($item->getValue());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setParameters($res);

                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setUrlRewrites($res);

                    $res = [];
                    foreach ($item->getVariants() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\Variant
                        // to \Magento\CatalogStorefrontApi\Api\Data\Variant
                        /** @var \Magento\CatalogStorefrontApi\Proto\Variant $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\Variant();
                            $r->setProduct($item->getProduct());
                            $res = [];
                            foreach ($item->getAttributes() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\VariantAttribute
                                // to \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute
                                /** @var \Magento\CatalogStorefrontApi\Proto\VariantAttribute $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\VariantAttribute();
                                    $r->setLabel($item->getLabel());
                                    $r->setCode($item->getCode());
                                    $r->setValueIndex($item->getValueIndex());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setAttributes($res);

                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setVariants($res);

                    $res = [];
                    foreach ($item->getConfigurableOptions() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Proto\ConfigurableOption
                        // to \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption
                        /** @var \Magento\CatalogStorefrontApi\Proto\ConfigurableOption $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOption();
                            $r->setId($item->getId());
                            $r->setLabel($item->getLabel());
                            $r->setPosition($item->getPosition());
                            $r->setUseDefault($item->getUseDefault());
                            $r->setProductId($item->getProductId());
                            $r->setAttributeCode($item->getAttributeCode());
                            $r->setAttributeId($item->getAttributeId());
                            $res = [];
                            foreach ($item->getValues() as $item) {
                                // convert data from \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue
                                // to \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue
                                /** @var \Magento\CatalogStorefrontApi\Proto\ConfigurableOptionValue $item **/
                                $p = function () use ($item) {
                                    $r = new \Magento\CatalogStorefrontApi\Api\Data\ConfigurableOptionValue();
                                    $r->setValueIndex($item->getValueIndex());
                                    $r->setLabel($item->getLabel());
                                    $r->setDefaultLabel($item->getDefaultLabel());
                                    $r->setStoreLabel($item->getStoreLabel());
                                    $r->setUseDefaultValue($item->getUseDefaultValue());
                                    $r->setAttributeId($item->getAttributeId());
                                    $r->setProductId($item->getProductId());
                                    return $r;
                                };
                                $out = $p();
                                $res[] = $out;
                            }
                            $r->setValues($res);

                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setConfigurableOptions($res);

                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setProducts($res);

            $r->setStore($value->getStore());
            $prop3 = $value->getParams();
            if ($prop3 !== null) {
                // convert data from \Magento\CatalogStorefrontApi\Proto\KeyValue
                // to \Magento\CatalogStorefrontApi\Api\Data\KeyValue
                /** @var \Magento\CatalogStorefrontApi\Proto\KeyValue $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\CatalogStorefrontApi\Api\Data\KeyValue();
                    $r->setKey($prop3->getKey());
                    $r->setValue($prop3->getValue());
                    return $r;
                };
                $out = $p();
                $r->setParams($out);
            }

            return $r;
        };
        $out = $p();

        return $out;
    }

    private function ImportProductsToProto(\Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponseInterface $value): \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse
        // to \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\ImportProductsResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\ImportProductsResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $proto = $p();

        return $proto;
    }


    public function GetCategories(\Spiral\GRPC\ContextInterface $ctx, \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest $in): \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse
    {
        try {
            $magentoDtoRequest = $this->GetCategoriesFromProto($in);
            $magentoDtoResponse = $this->service->GetCategories($magentoDtoRequest);
            return $this->GetCategoriesToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    private function GetCategoriesFromProto(\Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest $value): \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequestInterface
    {
        // convert data from \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest
        // to \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequest
        /** @var \Magento\CatalogStorefrontApi\Proto\CategoriesGetRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetRequest();
            $r->setIds($value->getIds());
            $r->setLevel($value->getLevel());
            $r->setStore($value->getStore());
            $r->setAttributeCodes($value->getAttributeCodes());
            return $r;
        };
        $out = $p();

        return $out;
    }

    private function GetCategoriesToProto(\Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponseInterface $value): \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse
    {
        // convert data from \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponse
        // to \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse
        /** @var \Magento\CatalogStorefrontApi\Api\Data\CategoriesGetResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\CatalogStorefrontApi\Proto\CategoriesGetResponse();
            $res = [];
            foreach ($value->getItems() as $item) {
                // convert data from \Magento\CatalogStorefrontApi\Api\Data\Category
                // to \Magento\CatalogStorefrontApi\Proto\Category
                /** @var \Magento\CatalogStorefrontApi\Api\Data\Category $item **/
                $p = function () use ($item) {
                    $r = new \Magento\CatalogStorefrontApi\Proto\Category();
                    $r->setId($item->getId());
                    $r->setPath($item->getPath());
                    $r->setPosition($item->getPosition());
                    $r->setLevel($item->getLevel());
                    $r->setChildrenCount($item->getChildrenCount());
                    $r->setName($item->getName());
                    $r->setDisplayMode($item->getDisplayMode());
                    $r->setDefaultSortBy($item->getDefaultSortBy());
                    $r->setUrlKey($item->getUrlKey());
                    $r->setUrlPath($item->getUrlPath());
                    $r->setIsActive($item->getIsActive());
                    $r->setIsAnchor($item->getIsAnchor());
                    $r->setIncludeInMenu($item->getIncludeInMenu());
                    $r->setAvailableSortBy($item->getAvailableSortBy());
                    $res = [];
                    foreach ($item->getBreadcrumbs() as $item) {
                        // convert data from \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb
                        // to \Magento\CatalogStorefrontApi\Proto\Breadcrumb
                        /** @var \Magento\CatalogStorefrontApi\Api\Data\Breadcrumb $item **/
                        $p = function () use ($item) {
                            $r = new \Magento\CatalogStorefrontApi\Proto\Breadcrumb();
                            $r->setCategoryId($item->getCategoryId());
                            $r->setCategoryName($item->getCategoryName());
                            $r->setCategoryLevel($item->getCategoryLevel());
                            $r->setCategoryUrlKey($item->getCategoryUrlKey());
                            $r->setCategoryUrlPath($item->getCategoryUrlPath());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setBreadcrumbs($res);

                    $r->setDescription($item->getDescription());
                    $r->setCanonicalUrl($item->getCanonicalUrl());
                    $r->setProductCount($item->getProductCount());
                    $r->setChildren($item->getChildren());
                    $r->setImage($item->getImage());
                    $r->setParentId($item->getParentId());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setItems($res);

            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
